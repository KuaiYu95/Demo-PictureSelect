{"version":3,"sources":["PictureSelect.js","App.js","serviceWorker.js","index.js"],"names":["PictureSelect","props","pictures","value","onChange","handleClick","e","_id","target","id","indexOf","val","filter","it","className","map","key","type","name","checked","for","style","width","src","url","alt","App","React","useState","setValue","length","data","push","hangleChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAqCeA,MAlCf,SAAuBC,GAAQ,IAExBC,EAA6BD,EAA7BC,SAAUC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,SAEtB,SAASC,EAAaC,GACpB,IAAMC,EAAMD,EAAEE,OAAOC,GAErB,GADYN,EAAMO,QAAQH,GAChB,EACRH,EAAS,GAAD,mBAAKD,GAAL,CAAYI,SACf,CACL,IAAMI,EAAM,YAAIR,GAAOS,OAAO,SAAAC,GAAE,OAAIA,IAAON,IAC3CH,EAASO,IAIb,OACE,yBAAKG,UAAU,YACZZ,EAASa,IAAI,SAAAF,GACZ,OACE,yBAAKC,UAAU,YAAYE,IAAKH,EAAGJ,IACjC,2BAAOK,UAAU,KAAKG,KAAK,WAAWC,KAAML,EAAGK,KAAMT,GAAII,EAAGJ,GAC1DU,UAAShB,EAAMO,QAAQG,EAAGJ,IAAM,GAChCL,SAAU,SAACE,GAAD,OAAOD,EAAYC,MAC/B,2BAAOc,IAAKP,EAAGJ,IACb,yBAAKY,MAAO,CAACC,MAAO,QAASC,IAAKV,EAAGW,IAAKC,IAAKZ,EAAGW,MAClD,uBAAGV,UAAU,QAAQD,EAAGJ,GAAxB,c,MCmBCiB,MA3Cf,WAAgB,IAAD,EAEaC,IAAMC,SAAS,CAAC,MAF7B,mBAENzB,EAFM,KAEC0B,EAFD,KAGP3B,EAAW,CACf,CACEO,GAAI,IACJS,KAAM,MACNM,IAAK,yFAEP,CACEf,GAAI,IACJS,KAAM,MACNM,IAAK,yFAEP,CACEf,GAAI,IACJS,KAAM,MACNM,IAAK,0FAcT,OACE,yBAAKV,UAAU,WACb,yBAAKA,UAAU,SACb,2BAAOG,KAAK,WAAWR,GAAG,KAAKL,SAAU,kBAb/C,WACE,GAAID,EAAM2B,SAAW5B,EAAS4B,OAC5BD,EAAS,QACJ,CACL,IAAME,EAAO,GACb7B,EAASa,IAAI,SAAAF,GAAE,OAAIkB,EAAKC,KAAKnB,EAAGJ,MAChCoB,EAASE,IAOwCE,IAC7Cd,QAAShB,EAAM2B,SAAW5B,EAAS4B,SACrC,2BAAOV,IAAI,MAAK,mDAAUjB,EAAM2B,OAAhB,wBAElB,kBAAC,EAAD,CAAe5B,SAAUA,EAAUC,MAAOA,EAAOC,SAAU,SAACD,GAAD,OAAW0B,EAAS1B,QC9BjE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d0c2f127.chunk.js","sourcesContent":["import React from 'react';\nimport './PictureSelect.css'\n\nfunction PictureSelect(props) {\n\n  let {pictures, value, onChange} = props\n\n  function handleClick (e) {\n    const _id = e.target.id\n    const idx = value.indexOf(_id)\n    if (idx < 0) {\n      onChange([...value, _id])\n    } else {\n      const val = [...value].filter(it => it !== _id)\n      onChange(val)\n    }\n  }\n\n  return (\n    <div className=\"pictures\">\n      {pictures.map(it => {\n        return (\n          <div className=\"container\" key={it.id}>\n            <input className=\"cb\" type=\"checkbox\" name={it.name} id={it.id} \n              checked={value.indexOf(it.id) < 0 ? false : true} \n              onChange={(e) => handleClick(e)} />\n            <label for={it.id}>\n              <img style={{width: '100%'}} src={it.url} alt={it.url} />\n              <p className=\"info\">{it.id}.jpg</p>\n            </label>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default PictureSelect","import React from 'react';\nimport PictureSelect from './PictureSelect'\nimport './App.css';\n\nfunction App() {\n  \n  const [value, setValue] = React.useState(['1']);\n  const pictures = [\n    {\n      id: '1',\n      name: 'foo',\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n    },\n    {\n      id: '2',\n      name: 'foo',\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n    },\n    {\n      id: '3',\n      name: 'foo',\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n    },\n  ];\n\n  function hangleChange() {\n    if (value.length === pictures.length) {\n      setValue([])\n    } else {\n      const data = []\n      pictures.map(it => data.push(it.id))\n      setValue(data)\n    }\n  }\n  \n  return (\n    <div className=\"contain\">\n      <div className=\"total\">\n        <input type=\"checkbox\" id=\"cb\" onChange={() => hangleChange()} \n          checked={value.length === pictures.length ? true : false} />\n        <label for=\"cb\"><span>已选中{value.length}个图片</span></label>\n      </div>\n      <PictureSelect pictures={pictures} value={value} onChange={(value) => setValue(value)} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}